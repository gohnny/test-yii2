<div class="blog">
    <div class="container">
        <h1>RBAC - это просто!</h1>

        В этом посте я постараюсь понятно объяснить как настроить RBAC в Yii2. Напомню, RBAC - Role Based
        Access Control, что означает - Контроль доступа на основе ролоей. Программисты, которые не разобрались с RBAC,
        «впихивают» в модель юзера константы, типа ROLE_ADMIN, ROLE_USER, ROLE_MANAGER. В таблице юзера хранят роль…
        Потом
        в коде сравнивают эту самую роль… Я и сам писал подобный шлак, пока в один прекрасный момент не разобрался с
        примитивныи
        использованием RBAC.

        Без моих пояснений понятно, что каждому пользователю назначается роль (role)/много ролей/разрешения
        (permissions)/
        правила (rules)… Роль может включать какие то разрешения. Она может наследовать разрешения от другой роли или
        нескольких ролей и т.д. Уверен, вы это уже миллион раз перечитали, пережевали… И всё равно вам непонятно, как
        же это работает, и как всё таки заставить в своем проекте работать этот «непонятный» RBAC.

        Почему так всё запутано?
        Да потому что, «умники» пишут ствои статьи, полагая, что вы уже и без них всё знаете! Авторы кидают копипасты,
        воруя тексты друг у друга. И никто из них не пытается объяснить сути работы RBAC. Одни пишут о каких то файлах,
        которых хранят все данные. Другие пишут, что можно хранить конфигурацию в БД. При этом, всё равно, нужны какие
        то файлы,
        которые нужно запускать в консоли. У одних файлы лежат в одном месте, у других - в другом. Ну да ладно, поехали
        дальше…

        Так как работает RBAC в Yii2?
        Я глубоко не изучал, как работает RBAC в Yii1, потому что использовал модули yii-user и rights. Но уверен, что в
        Yii2 изменилось немного.

        Суть работы RBAC следующая: вы создаете экшены. Каждый экшн по сути - это какая то операция. Нужно проверить,
        имеет
        ли право текущий пользователь выполнять эту операцию. Пользователь имеет право её выполнять, если ему присвоено
        разрешение непосредственно для этой операции, либо роли пользователя присвоено такое разрешение. Так же
        возможно,
        что роль пользователя наследует другую роль, а той, в свою очередь, присвоено разрешение на проверяемую
        операцию.
        Глубина наследований практически не имеет границ.

        Определиться с тем, какие роли будут в вашем проекте вы должны еще на стадии проектирования. В простом
        исполнении для
        каждого экшена нужно будет создавать именованное разрешение. Имя разрешения должно раскрывать его суть. По имени
        разрешения вы должны понять, в каком экшене оно используется. В коде экшенов вы вызываете проверку разрешений с
        помощью Yii::$app->user->can('имя_разрешения_или_роли').

        Разрешения, роли, назначения можно хранить в базе данных, а можно и в файлах. Ниже я буду описывать вариант
        хранения данных в БД.
    </div>
</div>